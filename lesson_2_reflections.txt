When a repository is initialized, a .git file is added and
allows the user the begin tracking changes between commits.

The staging area is comprised of items within the working
directory which will be committed in a git commit to the
repository. This allows files to exist within the working
directory, but not be a part of the repository. This is valueable
during testing of new features which make sense to exist inside
a different file, but are still being worked on and are too
small to be committed to the repository.

Using the staging area allows users to load their changes
incrementally, with a selected set of files at a time.

Using a branch is useful when creating a different or alternative
version of the project being worked on. It should also come
in handy when experimenting with a completely new aspect that
one would want to add to the project.

Diagrams just give a visual representation of which branches
are currently active, and gives a good indication of any
future merges that need to be addressed once new features
or modes are finished.

Merging two branches together groups any changes made on 
the two branches from their orginal split, and adds them
all into a new version, incorporating the changes from both
versions.

Manual merges seem to have the benefit where, if there is a
change in a function, or code is simplified, that simplification
won't be overwritten, or made redundent. The automatic
merging if very very convenient though.